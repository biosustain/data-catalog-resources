name: PR Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:
    inputs:
      cleanup_pr_number:
        description: 'PR number to clean up (leave empty for manual cleanup of old directories)'
        required: false
        type: string
      max_age_days:
        description: 'Maximum age in days for PR directories to keep (older will be cleaned up)'
        required: false
        default: '30'
        type: string
      dry_run:
        description: 'Dry run - only show what would be deleted without actually deleting'
        required: false
        default: false
        type: boolean
    
jobs:
  pr-preview:
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository && github.event.action != 'closed' # Only for PRs from same repo, not closed
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    
    - name: Generate random URL path for PR preview security
      id: random-path
      run: |
        # Generate a random 16-character string for PR preview security
        RANDOM_COMPONENT=$(openssl rand -hex 8)
        echo "path=pr-${{ github.event.pull_request.number }}-${RANDOM_COMPONENT}" >> $GITHUB_OUTPUT
        echo "random_component=${RANDOM_COMPONENT}" >> $GITHUB_OUTPUT
        echo "Generated PR preview path: pr-${{ github.event.pull_request.number }}-${RANDOM_COMPONENT}"
        echo "::notice title=PR Preview Path::pr-${{ github.event.pull_request.number }}-${RANDOM_COMPONENT}"
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build documentation
      run: |
        sphinx-build -b html . _build
        
    - name: Add .nojekyll file
      run: touch _build/.nojekyll
      
    - name: Deploy PR Preview
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./_build
        destination_dir: ${{ steps.random-path.outputs.path }}
        keep_files: true  # Keep other files (versions, stable, latest)
        commit_message: 'PR #${{ github.event.pull_request.number }} preview: ${{ github.sha }}'
        
    - name: Comment PR with preview link
      uses: actions/github-script@v6
      with:
        script: |
          const prNumber = context.issue.number;
          const repoOwner = context.repo.owner;
          const repoName = context.repo.repo;
          const randomPath = '${{ steps.random-path.outputs.path }}';
          const previewUrl = `https://${repoOwner}.github.io/${repoName}/${randomPath}/`;
          
          github.rest.issues.createComment({
            issue_number: prNumber,
            owner: repoOwner,
            repo: repoName,
            body: `üöÄ **PR Preview deployed!**\n\nüìñ Preview your changes: ${previewUrl}\n\nüîí **Security Note:** This URL contains a random component for security\n\n_This preview will be updated automatically when you push new commits._`
          });

  pr-cleanup:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed' && github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: gh-pages
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Find and remove PR preview directory
      run: |
        PR_NUMBER="${{ github.event.pull_request.number }}"
        echo "üßπ Looking for PR preview directories for PR #${PR_NUMBER}..."
        
        # Find directories that start with pr-{PR_NUMBER}- (with random suffix)
        DIRS_TO_DELETE=$(find . -maxdepth 1 -type d -name "pr-${PR_NUMBER}-*" | head -10)
        
        if [ -n "$DIRS_TO_DELETE" ]; then
          echo "Found directories to delete:"
          echo "$DIRS_TO_DELETE"
          
          # Remove the directories
          echo "$DIRS_TO_DELETE" | xargs rm -rf
          
          # Commit and push the changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "cleanup: remove PR #${PR_NUMBER} preview directories - automatically removed after PR closure"
            git push origin gh-pages
            echo "‚úÖ Successfully removed PR #${PR_NUMBER} preview directories"
          fi
        else
          echo "No PR preview directories found for PR #${PR_NUMBER}"
        fi
        
    - name: Comment on PR about cleanup
      uses: actions/github-script@v6
      with:
        script: |
          const prNumber = context.issue.number;
          
          github.rest.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üßπ **PR Preview Cleanup**\n\nPreview directories for this PR have been automatically removed from the deployment.\n\n_This helps keep the repository clean by removing old preview deployments._`
          });

  # Manual cleanup job (triggered via workflow_dispatch)
  manual-cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: gh-pages
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Manual cleanup of PR preview directories
      run: |
        set -e
        
        CLEANUP_PR="${{ github.event.inputs.cleanup_pr_number }}"
        MAX_AGE_DAYS="${{ github.event.inputs.max_age_days || '30' }}"
        DRY_RUN="${{ github.event.inputs.dry_run || 'false' }}"
        
        echo "üßπ Starting manual cleanup of PR preview directories..."
        echo "Cleanup specific PR: ${CLEANUP_PR:-'none (cleaning by age)'}"
        echo "Max age: ${MAX_AGE_DAYS} days"
        echo "Dry run: ${DRY_RUN}"
        
        # Ensure we're on the gh-pages branch
        git checkout gh-pages
        git pull origin gh-pages || echo "‚ö†Ô∏è Warning: Could not pull latest changes"
        
        if [ -n "$CLEANUP_PR" ]; then
          # Clean up specific PR
          echo "Looking for directories for PR #${CLEANUP_PR}..."
          DIRS_TO_DELETE=$(find . -maxdepth 1 -type d -name "pr-${CLEANUP_PR}-*" 2>/dev/null || true)
        else
          # Clean up by age
          echo "Looking for old PR directories..."
          DIRS_TO_DELETE=$(find . -maxdepth 1 -type d -name "pr-*-*" 2>/dev/null || true)
        fi
        
        if [ -n "$DIRS_TO_DELETE" ] && [ "$DIRS_TO_DELETE" != "" ]; then
          echo "Found directories:"
          echo "$DIRS_TO_DELETE"
          
          DELETED_COUNT=0
          
          if [ -z "$CLEANUP_PR" ]; then
            # Age-based cleanup
            CUTOFF_TIMESTAMP=$(date -d "${MAX_AGE_DAYS} days ago" +%s 2>/dev/null || date -v-${MAX_AGE_DAYS}d +%s)
            echo "Cutoff date: $(date -d @${CUTOFF_TIMESTAMP} 2>/dev/null || date -r ${CUTOFF_TIMESTAMP})"
          fi
          
          echo "$DIRS_TO_DELETE" | while IFS= read -r dir; do
            if [ -d "$dir" ]; then
              SHOULD_DELETE=false
              
              if [ -n "$CLEANUP_PR" ]; then
                # Delete specific PR directories
                SHOULD_DELETE=true
              else
                # Check age for general cleanup
                if [[ "$OSTYPE" == "darwin"* ]]; then
                  DIR_TIMESTAMP=$(stat -f %m "$dir" 2>/dev/null || echo "0")
                else
                  DIR_TIMESTAMP=$(stat -c %Y "$dir" 2>/dev/null || echo "0")
                fi
                
                if [ "$DIR_TIMESTAMP" -lt "$CUTOFF_TIMESTAMP" ]; then
                  SHOULD_DELETE=true
                fi
              fi
              
              if [ "$SHOULD_DELETE" = true ]; then
                if [ "$DRY_RUN" = "true" ]; then
                  echo "üîç DRY RUN: Would delete $dir"
                else
                  echo "üóëÔ∏è Deleting $dir"
                  rm -rf "$dir"
                  DELETED_COUNT=$((DELETED_COUNT + 1))
                fi
              fi
            fi
          done
          
          if [ "$DRY_RUN" = "false" ] && [ "$DELETED_COUNT" -gt 0 ]; then
            # Configure git and commit
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            
            git add -A
            if ! git diff --cached --quiet; then
              git commit -m "cleanup: manual removal of ${DELETED_COUNT} PR preview directories"
              git push origin gh-pages
              echo "‚úÖ Successfully removed ${DELETED_COUNT} PR preview directories"
            fi
          elif [ "$DRY_RUN" = "true" ]; then
            echo "‚úÖ Dry run completed - no directories were actually deleted"
          fi
        else
          echo "‚ÑπÔ∏è No PR preview directories found to clean up"
        fi
