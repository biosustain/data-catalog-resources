name: PR Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    
jobs:
  pr-preview:
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository && github.event.action != 'closed' # Only for PRs from same repo, not closed
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    
    - name: Generate random URL path for PR preview security
      id: random-path
      run: |
        # Generate a random 16-character string for PR preview security
        RANDOM_COMPONENT=$(openssl rand -hex 8)
        echo "path=pr-${{ github.event.pull_request.number }}-${RANDOM_COMPONENT}" >> $GITHUB_OUTPUT
        echo "random_component=${RANDOM_COMPONENT}" >> $GITHUB_OUTPUT
        echo "Generated PR preview path: pr-${{ github.event.pull_request.number }}-${RANDOM_COMPONENT}"
        echo "::notice title=PR Preview Path::pr-${{ github.event.pull_request.number }}-${RANDOM_COMPONENT}"
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build documentation
      run: |
        sphinx-build -b html . _build
        
    - name: Add .nojekyll file
      run: touch _build/.nojekyll
      
    - name: Deploy PR Preview
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./_build
        destination_dir: ${{ steps.random-path.outputs.path }}
        keep_files: true  # Keep other files (versions, stable, latest)
        commit_message: 'PR #${{ github.event.pull_request.number }} preview: ${{ github.sha }}'
        
    - name: Comment PR with preview link
      uses: actions/github-script@v6
      with:
        script: |
          const prNumber = context.issue.number;
          const repoOwner = context.repo.owner;
          const repoName = context.repo.repo;
          const randomPath = '${{ steps.random-path.outputs.path }}';
          const previewUrl = `https://${repoOwner}.github.io/${repoName}/${randomPath}/`;
          
          github.rest.issues.createComment({
            issue_number: prNumber,
            owner: repoOwner,
            repo: repoName,
            body: `üöÄ **PR Preview deployed!**\n\nüìñ Preview your changes: ${previewUrl}\n\nüîí **Security Note:** This URL contains a random component for security\n\n_This preview will be updated automatically when you push new commits._`
          });

  pr-cleanup:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed' && github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: gh-pages
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Find and remove PR preview directory
      run: |
        set -e  # Exit on any error
        
        PR_NUMBER="${{ github.event.pull_request.number }}"
        echo "üßπ Looking for PR preview directories for PR #${PR_NUMBER}..."
        
        # Ensure we're on the gh-pages branch and pull latest changes
        git checkout gh-pages
        git pull origin gh-pages || echo "‚ö†Ô∏è Warning: Could not pull latest changes from gh-pages"
        
        # Find directories that start with pr-{PR_NUMBER}- (with random suffix)
        echo "Searching for directories matching pattern: pr-${PR_NUMBER}-*"
        DIRS_TO_DELETE=$(find . -maxdepth 1 -type d -name "pr-${PR_NUMBER}-*" 2>/dev/null | head -20 || true)
        
        if [ -n "$DIRS_TO_DELETE" ] && [ "$DIRS_TO_DELETE" != "" ]; then
          echo "Found directories to delete:"
          echo "$DIRS_TO_DELETE"
          
          # Count directories
          DIR_COUNT=$(echo "$DIRS_TO_DELETE" | wc -l)
          echo "Number of directories to delete: $DIR_COUNT"
          
          # Remove the directories one by one with error checking
          echo "$DIRS_TO_DELETE" | while IFS= read -r dir; do
            if [ -d "$dir" ]; then
              echo "Removing directory: $dir"
              rm -rf "$dir"
              echo "‚úÖ Successfully removed: $dir"
            else
              echo "‚ö†Ô∏è Directory not found (already removed?): $dir"
            fi
          done
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add all changes and commit
          git add -A
          if git diff --cached --quiet; then
            echo "‚ÑπÔ∏è No changes to commit - directories may have been already removed"
          else
            git commit -m "cleanup: remove PR #${PR_NUMBER} preview directories - automatically removed after PR closure (removed $DIR_COUNT directories)"
            
            # Push with retry logic
            for i in 1 2 3; do
              if git push origin gh-pages; then
                echo "‚úÖ Successfully pushed cleanup changes to gh-pages (attempt $i)"
                break
              else
                echo "‚ö†Ô∏è Push failed (attempt $i), retrying..."
                sleep 2
                git pull origin gh-pages --rebase || true
              fi
              
              if [ $i -eq 3 ]; then
                echo "‚ùå Failed to push after 3 attempts"
                exit 1
              fi
            done
            
            echo "‚úÖ Successfully removed PR #${PR_NUMBER} preview directories"
          fi
        else
          echo "‚ÑπÔ∏è No PR preview directories found for PR #${PR_NUMBER}"
        fi
        
    - name: Comment on PR about cleanup
      uses: actions/github-script@v6
      with:
        script: |
          const prNumber = context.issue.number;
          
          github.rest.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üßπ **PR Preview Cleanup**\n\nPreview directories for this PR have been automatically removed from the deployment.\n\n_This helps keep the repository clean by removing old preview deployments._`
          });

  # Manual cleanup job for orphaned PR directories (can be triggered manually)
  manual-cleanup:
    runs-on: ubuntu-latest
    # This job only runs on manual workflow dispatch
    if: false  # Disabled by default, can be enabled manually
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: gh-pages
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Clean up orphaned PR preview directories
      run: |
        set -e
        
        echo "üßπ Starting cleanup of orphaned PR preview directories..."
        
        # Ensure we're on the gh-pages branch
        git checkout gh-pages
        git pull origin gh-pages || echo "‚ö†Ô∏è Warning: Could not pull latest changes"
        
        # Find all PR directories
        PR_DIRS=$(find . -maxdepth 1 -type d -name "pr-*-*" 2>/dev/null || true)
        
        if [ -n "$PR_DIRS" ] && [ "$PR_DIRS" != "" ]; then
          echo "Found PR directories:"
          echo "$PR_DIRS"
          
          # This is a manual process - for safety, just list what would be cleaned
          echo ""
          echo "‚ö†Ô∏è Manual cleanup required. Found the following PR directories:"
          echo "$PR_DIRS" | while IFS= read -r dir; do
            if [ -d "$dir" ]; then
              echo "Directory: $dir"
            fi
          done
          
          echo ""
          echo "To clean these up, you can:"
          echo "1. Check which PRs are actually closed/merged on GitHub"
          echo "2. Manually remove the directories for closed PRs"
          echo "3. Or modify this workflow to automatically clean up directories older than X days"
        else
          echo "‚ÑπÔ∏è No PR preview directories found to clean up"
        fi
