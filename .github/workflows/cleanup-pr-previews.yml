name: Cleanup PR Previews

on:
  workflow_dispatch:
    inputs:
      max_age_days:
        description: 'Maximum age in days for PR directories to keep (older will be cleaned up)'
        required: false
        default: '30'
        type: string
      dry_run:
        description: 'Dry run - only show what would be deleted without actually deleting'
        required: false
        default: false
        type: boolean

jobs:
  cleanup:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: gh-pages
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Clean up old PR preview directories
      run: |
        set -e
        
        MAX_AGE_DAYS="${{ github.event.inputs.max_age_days || '30' }}"
        DRY_RUN="${{ github.event.inputs.dry_run || 'false' }}"
        
        echo "üßπ Starting cleanup of old PR preview directories..."
        echo "Max age: ${MAX_AGE_DAYS} days"
        echo "Dry run: ${DRY_RUN}"
        echo "Current time: $(date)"
        
        # Ensure we're on the gh-pages branch
        git checkout gh-pages
        git pull origin gh-pages || echo "‚ö†Ô∏è Warning: Could not pull latest changes"
        
        # Find all PR directories
        echo "Looking for PR directories..."
        PR_DIRS=$(find . -maxdepth 1 -type d -name "pr-*-*" 2>/dev/null | sort || true)
        
        if [ -n "$PR_DIRS" ] && [ "$PR_DIRS" != "" ]; then
          echo "Found PR directories:"
          echo "$PR_DIRS"
          echo ""
          
          DELETED_COUNT=0
          TEMP_LIST_FILE="/tmp/dirs_to_delete.txt"
          
          # Create a temporary file to track what we're deleting
          > "$TEMP_LIST_FILE"
          
          # Calculate cutoff timestamp - use different methods for compatibility
          echo "Calculating cutoff date for ${MAX_AGE_DAYS} days ago..."
          
          # Try Linux date command first (GitHub Actions uses Linux)
          if CUTOFF_TIMESTAMP=$(date -d "${MAX_AGE_DAYS} days ago" +%s 2>/dev/null); then
            echo "Using Linux date command"
          elif CUTOFF_TIMESTAMP=$(date -v-${MAX_AGE_DAYS}d +%s 2>/dev/null); then
            echo "Using macOS date command"
          else
            # Fallback: approximate calculation (86400 seconds per day)
            CURRENT_TIMESTAMP=$(date +%s)
            SECONDS_IN_DAY=86400
            CUTOFF_TIMESTAMP=$((CURRENT_TIMESTAMP - (MAX_AGE_DAYS * SECONDS_IN_DAY)))
            echo "Using fallback calculation"
          fi
          
          CUTOFF_DATE=$(date -d @${CUTOFF_TIMESTAMP} 2>/dev/null || date -r ${CUTOFF_TIMESTAMP} 2>/dev/null || echo "unknown")
          echo "Cutoff timestamp: ${CUTOFF_TIMESTAMP}"
          echo "Cutoff date: ${CUTOFF_DATE}"
          echo "Current timestamp: $(date +%s)"
          echo "Current date: $(date)"
          echo ""
          
          # Process each directory
          for dir in $PR_DIRS; do
            if [ -d "$dir" ]; then
              echo "=== Checking directory: $dir ==="
              
              # Use Git history to find when this directory was last modified
              # This is more reliable than filesystem timestamps
              DIR_NAME=$(basename "$dir")
              
              # Get the timestamp of the last commit that modified this directory
              LAST_COMMIT_TIMESTAMP=$(git log -1 --format="%ct" --follow -- "$dir" 2>/dev/null || echo "0")
              
              if [ "$LAST_COMMIT_TIMESTAMP" != "0" ] && [ -n "$LAST_COMMIT_TIMESTAMP" ]; then
                LAST_COMMIT_DATE=$(date -d @${LAST_COMMIT_TIMESTAMP} 2>/dev/null || date -r ${LAST_COMMIT_TIMESTAMP} 2>/dev/null || echo "unknown")
                echo "Last Git commit for this directory: ${LAST_COMMIT_DATE}"
                echo "Last commit timestamp: ${LAST_COMMIT_TIMESTAMP}"
                
                # Compare with cutoff
                echo "Comparing: ${LAST_COMMIT_TIMESTAMP} < ${CUTOFF_TIMESTAMP}"
                if [ "$LAST_COMMIT_TIMESTAMP" -lt "$CUTOFF_TIMESTAMP" ]; then
                  echo "  ‚ûú Directory IS older than ${MAX_AGE_DAYS} days (by Git history) ‚úì"
                  if [ "$DRY_RUN" = "true" ]; then
                    echo "  üîç DRY RUN: Would delete $dir"
                    echo "$dir" >> "$TEMP_LIST_FILE"
                  else
                    echo "  üóëÔ∏è Deleting $dir"
                    rm -rf "$dir"
                    echo "$dir" >> "$TEMP_LIST_FILE"
                    DELETED_COUNT=$((DELETED_COUNT + 1))
                  fi
                else
                  echo "  ‚ûú Directory is newer than ${MAX_AGE_DAYS} days (by Git history), keeping"
                fi
              else
                echo "  ‚ö†Ô∏è Could not find Git history for directory, using fallback method..."
                
                # Fallback: Check if we can extract date from directory name or use creation time
                # PR directories have format pr-NUMBER-RANDOMHEX, let's check when that specific PR was created
                if [[ "$DIR_NAME" =~ ^pr-([0-9]+)- ]]; then
                  PR_NUM="${BASH_REMATCH[1]}"
                  echo "  Directory is for PR #${PR_NUM}"
                  
                  # As a last resort, assume directories older than current session are old
                  # This is not ideal but better than keeping everything
                  echo "  ‚ö†Ô∏è Using conservative approach: assuming this is old content"
                  if [ "$DRY_RUN" = "true" ]; then
                    echo "  üîç DRY RUN: Would delete $dir (no reliable timestamp)"
                    echo "$dir" >> "$TEMP_LIST_FILE"
                  else
                    echo "  üóëÔ∏è Deleting $dir (no reliable timestamp)"
                    rm -rf "$dir"
                    echo "$dir" >> "$TEMP_LIST_FILE"
                    DELETED_COUNT=$((DELETED_COUNT + 1))
                  fi
                else
                  echo "  ‚ö†Ô∏è Could not determine directory age, skipping for safety"
                fi
              fi
              echo ""
            fi
          done
          
          # Count what was actually processed
          if [ -f "$TEMP_LIST_FILE" ]; then
            PROCESSED_COUNT=$(wc -l < "$TEMP_LIST_FILE" 2>/dev/null || echo "0")
            if [ "$PROCESSED_COUNT" -gt 0 ]; then
              echo "üìã Directories processed:"
              cat "$TEMP_LIST_FILE"
              echo ""
            fi
          else
            PROCESSED_COUNT=0
          fi
          
          if [ "$DRY_RUN" = "false" ] && [ "$DELETED_COUNT" -gt 0 ]; then
            echo "Deleted $DELETED_COUNT directories"
            
            # Configure git
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            
            # Add all changes and commit
            git add -A
            if ! git diff --cached --quiet; then
              git commit -m "cleanup: remove ${DELETED_COUNT} old PR preview directories (older than ${MAX_AGE_DAYS} days)"
              git push origin gh-pages
              echo "‚úÖ Successfully removed ${DELETED_COUNT} old PR preview directories"
            else
              echo "‚ÑπÔ∏è No changes to commit - directories may have been already removed"
            fi
          elif [ "$DRY_RUN" = "true" ] && [ "$PROCESSED_COUNT" -gt 0 ]; then
            echo "‚úÖ Dry run completed - found ${PROCESSED_COUNT} directories that would be deleted"
          elif [ "$PROCESSED_COUNT" -eq 0 ]; then
            echo "‚ÑπÔ∏è No directories were old enough to delete"
          else
            echo "‚ÑπÔ∏è No directories were processed"
          fi
          
          # Clean up temp file
          rm -f "$TEMP_LIST_FILE"
        else
          echo "‚ÑπÔ∏è No PR preview directories found to clean up"
        fi
        
        echo ""
        echo "üéâ Cleanup completed!"
